{"name":"Pfs","tagline":"A distributed filesystem for a Dockerized world.","body":"# Pachyderm File System\r\n\r\n## What is pfs?\r\nPfs is a distributed filesystem for large scale data processing similar to\r\nHDFS.  It's designed to integrate painlessly into a Docker stack by using\r\ncontainers itself for deployment and by letting users specify distributed\r\ncomputations as containers. Furthermore pfs leverage  btrfs (the same\r\nfilesystem that powers Docker itself) to offer cluster wide filesystem\r\nsnapshotting.\r\n\r\n## Key Features\r\n- Fault tolerant system built around CoreOS primitives (implemented)\r\n- Rich commit history (implemented)\r\n- Branching (not implemented)\r\n- Dockerized Map Reduce (not implemented)\r\n\r\n## Creating a CoreOS cluster\r\n\r\nPfs is designed to run on CoreOS. To start you'll need a working CoreOS\r\ncluster.\r\n\r\nGoogle Compute Engine (recommended): [https://coreos.com/docs/running-coreos/cloud-providers/google-compute-engine/]\r\nAmazon EC2: [https://coreos.com/docs/running-coreos/cloud-providers/ec2/]\r\n\r\n## Deploy pfs\r\nSSH in to one of your new machines CoreOS machines.\r\n\r\n`$ wget https://github.com/pachyderm-io/pfs/raw/master/deploy/static/3Node.tar.gz`\r\n\r\n`$ tar -xvf 3Node.tar.gz`\r\n\r\n`$ fleetctl start 3Node/*`\r\n\r\nThe startup process takes a little while the first time your run it because\r\neach node has to pull a Docker image.\r\n\r\n## Checking the status of your deploy\r\nThe easiest way to see what's going on in your cluster is to use `list-units`\r\n\r\n`$ fleetctl list-units`\r\n\r\nIf things are working correctly you should see something like:\r\n\r\n```\r\nUNIT                            MACHINE                         ACTIVE  SUB\r\nannounce-master-0-3.service     3817102d.../10.240.199.203      active  running\r\nannounce-master-1-3.service     06c6dba9.../10.240.177.113      active  running\r\nannounce-master-2-3.service     3817102d.../10.240.199.203      active  running\r\nannounce-replica-0-3.service    f652105a.../10.240.229.124      active  running\r\nannounce-replica-1-3.service    06c6dba9.../10.240.177.113      active  running\r\nannounce-replica-2-3.service    f652105a.../10.240.229.124      active  running\r\nmaster-0-3.service              3817102d.../10.240.199.203      active  running\r\nmaster-1-3.service              06c6dba9.../10.240.177.113      active  running\r\nmaster-2-3.service              3817102d.../10.240.199.203      active  running\r\nreplica-0-3.service             f652105a.../10.240.229.124      active  running\r\nreplica-1-3.service             06c6dba9.../10.240.177.113      active  running\r\nreplica-2-3.service             f652105a.../10.240.229.124      active  running\r\nrouter.service                  06c6dba9.../10.240.177.113      active  running\r\nrouter.service                  3817102d.../10.240.199.203      active  running\r\nrouter.service                  f652105a.../10.240.229.124      active  running\r\n```\r\n\r\n## Using pfs\r\nPfs exposes a git like interface to the file system:\r\n\r\n### Creating a file\r\n`$ curl -XPOST localhost/pfs/file_name -d @local_file`\r\n\r\n### Read a file\r\n`$ curl localhost/pfs/file_name`\r\n\r\n### Creating/modifying a file\r\n`$ curl -XPUT localhost/pfs/file_name -d @local_file`\r\n\r\n### Deleting a file\r\n`$ curl -XDELETE localhost/pfs/file_name`\r\n\r\n### Committing changes\r\n`$ curl localhost/commit`\r\n\r\nCommitting in pfs creates a lightweight snapshot of the file system state and\r\npushes it to replicas. Where it remains accessible by commit id.\r\n\r\n### Accessing previous commits\r\n`$ curl localhost/pfs/file_name?commit=n`\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}